class Main {

    // Method to calculate Levenshtein distance
    public static int computeLevenshtein(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();

        // Create a 2D array to store distances
        int[][] dp = new int[m + 1][n + 1];

        // Initialize the base cases
        for (int i = 0; i <= m; i++) {
            dp[i][0] = i;
        }
        for (int j = 0; j <= n; j++) {
            dp[0][j] = j;
        }

        // Fill the dp array
        for (int i = 1; i <= m; i++) {
            char ch1 = str1.charAt(i - 1);
            for (int j = 1; j <= n; j++) {
                char ch2 = str2.charAt(j - 1);

                if (ch1 == ch2) {
                    dp[i][j] = dp[i - 1][j - 1];  // No operation needed
                } else {
                    int insert = dp[i][j - 1];
                    int delete = dp[i - 1][j];
                    int replace = dp[i - 1][j - 1];
                    dp[i][j] = 1 + Math.min(insert, Math.min(delete, replace));
                }
            }
        }

        return dp[m][n];
    }

    // Main method to test the function
    public static void main(String[] args) {
        String str1 = "kitten";
        String str2 = "sitting";

        int distance = computeLevenshtein(str1, str2);
        System.out.println("Levenshtein Distance: " + distance);
    }
}